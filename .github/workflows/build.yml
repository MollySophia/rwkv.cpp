name: CI

on:
  # Allows manual triggering
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push: {}
  pull_request:
    types: [opened, synchronize, edited, reopened, review_requested, ready_for_review]

env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  ubuntu-latest-cmake-sanitizer:
    runs-on: ubuntu-latest

    continue-on-error: true

    strategy:
      matrix:
        # THREAD sanitizer is broken here and in llama.cpp
        sanitizer: [ADDRESS, UNDEFINED]
        build_type: [Debug, Release]

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Dependencies
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. -DRWKV_SANITIZE_${{ matrix.sanitizer }}=ON -DGGML_SANITIZE_${{ matrix.sanitizer }}=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build . --config ${{ matrix.build_type }}

      - name: Test
        id: cmake_test
        run: |
          cd build
          ASAN_OPTIONS=detect_odr_violation=0 ctest --verbose

  ubuntu-latest-cmake:
    runs-on: ubuntu-latest

    continue-on-error: true

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Dependencies
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential zip

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release

      - name: Test
        id: cmake_test
        run: |
          cd build
          ctest --verbose

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Fetch system info
        id: system-info
        run: |
          echo "CPU_ARCH=`uname -m`" >> "$GITHUB_OUTPUT"
          echo "OS_NAME=`lsb_release -s -i`" >> "$GITHUB_OUTPUT"
          echo "OS_VERSION=`lsb_release -s -r`" >> "$GITHUB_OUTPUT"
          echo "OS_TYPE=`uname -s`" >> "$GITHUB_OUTPUT"

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          zip -j rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}.zip ./build/librwkv.so

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}
          path: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}.zip

  macOS-latest-cmake:
    runs-on: macOS-latest

    continue-on-error: true

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Dependencies
        id: depends
        run: |
          brew install zip

      - name: Build
        id: cmake_build
        # FMA disabled because it gives "Illegal instruction" in GitHub Actions runner
        run: |
          mkdir build
          cd build
          cmake -DRWKV_AVX2=OFF -DRWKV_FMA=OFF -DRWKV_METAL=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" ..
          cmake --build . --config Release

      - name: Test
        id: cmake_test
        run: |
          cd build
          ctest --verbose

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Fetch system info
        id: system-info
        run: |
          echo "CPU_ARCH=`uname -m`" >> "$GITHUB_OUTPUT"
          echo "OS_NAME=`sw_vers -productName`" >> "$GITHUB_OUTPUT"
          echo "OS_VERSION=`sw_vers -productVersion`" >> "$GITHUB_OUTPUT"
          echo "OS_TYPE=`uname -s`" >> "$GITHUB_OUTPUT"

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          zip -j rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}.zip ./build/librwkv.dylib

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}
          path: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}.zip

  windows-latest-cmake:
    runs-on: windows-2019

    continue-on-error: true

    strategy:
      matrix:
        include:
         - build: 'avx2'
           defines: ''
         - build: 'avx'
           defines: '-DRWKV_AVX2=OFF'
         - build: 'avx512'
           defines: '-DRWKV_AVX512=ON'
         - build: 'cuda12'
           defines: '-DRWKV_CUBLAS=ON'
         - build: 'hip'
           defines: ''
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install cuda-toolkit
        id: cuda_toolkit
        if: ${{ matrix.build == 'cuda12' }}
        uses: Jimver/cuda-toolkit@v0.2.11
        with:
          cuda: '12.2.0'
          method: 'local'

      - name: Install rocm-toolkit
        id: rocm-toolkit
        if: ${{ matrix.build == 'hip' }}
        run: |
          $ErrorActionPreference = "Stop"
          write-host "Downloading AMD HIP SDK Installer"
          Invoke-WebRequest -Uri "https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-24.Q3-WinSvr2022-For-HIP.exe" -OutFile "${env:RUNNER_TEMP}\rocm-install.exe"
          write-host "Installing AMD HIP SDK"
          Start-Process "${env:RUNNER_TEMP}\rocm-install.exe" -ArgumentList '-install' -NoNewWindow -Wait
          write-host "Completed AMD HIP SDK installation"

      - name: Verify ROCm
        id: rocm-verify
        if: ${{ matrix.build == 'hip' }}
        run: |
          & 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' --version

      - name: Install Ninja
        id: install-ninja
        if: ${{ matrix.build == 'hip' }}
        uses: urkle/action-get-ninja@v1
        with:
          version: 1.11.1

      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}

      - name: Build
        id: cmake_build
        if: ${{ matrix.build != 'hip' }}
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release -j ${env:NUMBER_OF_PROCESSORS}

      - name: Build-hip
        id: cmake_build_hip
        if: ${{ matrix.build == 'hip' }}
        run: |
          mkdir build
          cd build
          $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
          $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"
          cmake .. -G "Unix Makefiles" -DCMAKE_C_COMPILER="${env:HIP_PATH}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${env:HIP_PATH}\bin\clang++.exe" -DRWKV_HIPBLAS=ON -DGGML_HIP=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release -j ${env:NUMBER_OF_PROCESSORS}

      - name: Check AVX512F support
        id: check_avx512f
        if: ${{ matrix.build == 'avx512' }}
        continue-on-error: true
        run: |
          cd build
          $vcdir = $(vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath)
          $msvc = $(join-path $vcdir $('VC\Tools\MSVC\'+$(gc -raw $(join-path $vcdir 'VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt')).Trim()))
          $cl =  $(join-path $msvc 'bin\Hostx64\x64\cl.exe')
          echo 'int main(void){unsigned int a[4];__cpuid(a,7);return !(a[1]&65536);}' >> avx512f.c
          & $cl /O2 /GS- /kernel avx512f.c /link /nodefaultlib /entry:main
          .\avx512f.exe && echo "AVX512F: YES" && ( echo HAS_AVX512F=1 >> $env:GITHUB_ENV ) || echo "AVX512F: NO"

      - name: Test
        id: cmake_test
        # Test AVX-512 only when possible
        if: ${{ (matrix.build != 'avx512' || env.HAS_AVX512F == '1') && matrix.build != 'cuda12' && matrix.build != 'hip'}}
        run: |
          cd build
          ctest -C Release --verbose

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          $filePath = ".\build\bin\Release\rwkv.dll"
          if (Test-Path $filePath) {
            echo "Exists at path $filePath"
          } elseif (Test-Path ".\build\bin\rwkv.dll") {
            $filePath = ".\build\bin\rwkv.dll"
            echo "Exists at path $filePath"
          } else {
            ls .\build\bin
            throw "Can't find rwkv.dll"
          }
          7z a rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip $filePath

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64
          path: |
            rwkv-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

    runs-on: ubuntu-latest

    needs:
      - ubuntu-latest-cmake
      - macOS-latest-cmake
      - windows-latest-cmake

    permissions:
      contents: write

    steps:
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/${file}`)
                });
              }
            }
